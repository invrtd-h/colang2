prog: VECTOR
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: YEOREOBUN YEOREOBUN
##
## Ends in an error in state: 1.
##
## toplevel -> YEOREOBUN . ID NEUN list(variant_def) QUESQUES [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## YEOREOBUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: YEOREOBUN ID YEOREOBUN
##
## Ends in an error in state: 2.
##
## toplevel -> YEOREOBUN ID . NEUN list(variant_def) QUESQUES [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## YEOREOBUN ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: YEOREOBUN ID NEUN YEOREOBUN
##
## Ends in an error in state: 3.
##
## toplevel -> YEOREOBUN ID NEUN . list(variant_def) QUESQUES [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## YEOREOBUN ID NEUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: YEOREOBUN ID NEUN ID YEOREOBUN
##
## Ends in an error in state: 4.
##
## variant_def -> ID . ILKAYO [ QUESQUES ID ]
## variant_def -> ID . COLON type_expr ILKAYO [ QUESQUES ID ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: YEOREOBUN ID NEUN ID COLON YEOREOBUN
##
## Ends in an error in state: 6.
##
## variant_def -> ID COLON . type_expr ILKAYO [ QUESQUES ID ]
##
## The known suffix of the stack is as follows:
## ID COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID COLON MTE YEOREOBUN
##
## Ends in an error in state: 8.
##
## type_expr -> MTE . LBRACE record_fields RBRACE [ SEMICOLON RPAREN REUL RBRACE LBRACE JOYGO IRANUN IRADO ILKAYO COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## MTE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID COLON MTE LBRACE YEOREOBUN
##
## Ends in an error in state: 9.
##
## type_expr -> MTE LBRACE . record_fields RBRACE [ SEMICOLON RPAREN REUL RBRACE LBRACE JOYGO IRANUN IRADO ILKAYO COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## MTE LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID COLON MTE LBRACE ID YEOREOBUN
##
## Ends in an error in state: 10.
##
## record_field -> ID . COLON type_expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID COLON MTE LBRACE ID COLON YEOREOBUN
##
## Ends in an error in state: 11.
##
## record_field -> ID COLON . type_expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## ID COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID COLON LPAREN YEOREOBUN
##
## Ends in an error in state: 12.
##
## type_expr -> LPAREN . type_expr RPAREN [ SEMICOLON RPAREN REUL RBRACE LBRACE JOYGO IRANUN IRADO ILKAYO COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID COLON ILKA YEOREOBUN
##
## Ends in an error in state: 14.
##
## type_expr -> ILKA . ANILKA QUESQUES [ SEMICOLON RPAREN REUL RBRACE LBRACE JOYGO IRANUN IRADO ILKAYO COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## ILKA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID COLON ILKA ANILKA YEOREOBUN
##
## Ends in an error in state: 15.
##
## type_expr -> ILKA ANILKA . QUESQUES [ SEMICOLON RPAREN REUL RBRACE LBRACE JOYGO IRANUN IRADO ILKAYO COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## ILKA ANILKA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID COLON LPAREN ID SEMICOLON
##
## Ends in an error in state: 19.
##
## type_expr -> type_expr . ARROW type_expr [ RPAREN JOYGO ARROW ]
## type_expr -> LPAREN type_expr . RPAREN [ SEMICOLON RPAREN REUL RBRACE LBRACE JOYGO IRANUN IRADO ILKAYO COMMA ARROW ]
## type_expr_tuple -> type_expr . JOYGO type_expr [ RPAREN JOYGO ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID COLON ID JOYGO YEOREOBUN
##
## Ends in an error in state: 21.
##
## type_expr_tuple -> type_expr JOYGO . type_expr [ SEMICOLON RPAREN REUL RBRACE LBRACE JOYGO IRANUN IRADO ILKAYO COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## type_expr JOYGO
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID COLON ID ARROW YEOREOBUN
##
## Ends in an error in state: 23.
##
## type_expr -> type_expr ARROW . type_expr [ SEMICOLON RPAREN REUL RBRACE LBRACE JOYGO IRANUN IRADO ILKAYO COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## type_expr ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID COLON ID ARROW ID YEOREOBUN
##
## Ends in an error in state: 24.
##
## type_expr -> type_expr . ARROW type_expr [ SEMICOLON RPAREN REUL RBRACE LBRACE JOYGO IRANUN IRADO ILKAYO COMMA ARROW ]
## type_expr -> type_expr ARROW type_expr . [ SEMICOLON RPAREN REUL RBRACE LBRACE JOYGO IRANUN IRADO ILKAYO COMMA ARROW ]
## type_expr_tuple -> type_expr . JOYGO type_expr [ SEMICOLON RPAREN REUL RBRACE LBRACE JOYGO IRANUN IRADO ILKAYO COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## type_expr ARROW type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID COLON MTE LBRACE ID COLON ID RPAREN
##
## Ends in an error in state: 25.
##
## record_field -> ID COLON type_expr . [ SEMICOLON RBRACE ]
## type_expr -> type_expr . ARROW type_expr [ SEMICOLON RBRACE JOYGO ARROW ]
## type_expr_tuple -> type_expr . JOYGO type_expr [ SEMICOLON RBRACE JOYGO ARROW ]
##
## The known suffix of the stack is as follows:
## ID COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID COLON MTE LBRACE ID COLON ID SEMICOLON YEOREOBUN
##
## Ends in an error in state: 29.
##
## record_fields -> record_field SEMICOLON . [ RBRACE ]
## record_fields -> record_field SEMICOLON . record_fields [ RBRACE ]
##
## The known suffix of the stack is as follows:
## record_field SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: YEOREOBUN ID NEUN ID COLON ID SEMICOLON
##
## Ends in an error in state: 31.
##
## type_expr -> type_expr . ARROW type_expr [ JOYGO ILKAYO ARROW ]
## type_expr_tuple -> type_expr . JOYGO type_expr [ JOYGO ILKAYO ARROW ]
## variant_def -> ID COLON type_expr . ILKAYO [ QUESQUES ID ]
##
## The known suffix of the stack is as follows:
## ID COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: YEOREOBUN ID NEUN ID ILKAYO YEOREOBUN
##
## Ends in an error in state: 33.
##
## list(variant_def) -> variant_def . list(variant_def) [ QUESQUES ]
##
## The known suffix of the stack is as follows:
## variant_def
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 YEOREOBUN
##
## Ends in an error in state: 37.
##
## toplevel -> LET1 . JAGIGA let_pattern IRANUN SARAMINDE expr eul HETE [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## LET1
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA YEOREOBUN
##
## Ends in an error in state: 38.
##
## toplevel -> LET1 JAGIGA . let_pattern IRANUN SARAMINDE expr eul HETE [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## LET1 JAGIGA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA LPAREN YEOREOBUN
##
## Ends in an error in state: 41.
##
## let_pattern -> LPAREN . separated_nonempty_list(COMMA,let_pattern) RPAREN [ RPAREN REUL IRANUN COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID YEOREOBUN
##
## Ends in an error in state: 43.
##
## let_pattern -> var_id . [ RPAREN REUL IRANUN COMMA ]
## let_pattern -> var_id . COLON type_expr [ RPAREN REUL IRANUN COMMA ]
##
## The known suffix of the stack is as follows:
## var_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID COLON YEOREOBUN
##
## Ends in an error in state: 44.
##
## let_pattern -> var_id COLON . type_expr [ RPAREN REUL IRANUN COMMA ]
##
## The known suffix of the stack is as follows:
## var_id COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID COLON ID SEMICOLON
##
## Ends in an error in state: 45.
##
## let_pattern -> var_id COLON type_expr . [ RPAREN REUL IRANUN COMMA ]
## type_expr -> type_expr . ARROW type_expr [ RPAREN REUL JOYGO IRANUN COMMA ARROW ]
## type_expr_tuple -> type_expr . JOYGO type_expr [ RPAREN REUL JOYGO IRANUN COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## var_id COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA LPAREN ID REUL
##
## Ends in an error in state: 48.
##
## separated_nonempty_list(COMMA,let_pattern) -> let_pattern . [ RPAREN ]
## separated_nonempty_list(COMMA,let_pattern) -> let_pattern . COMMA separated_nonempty_list(COMMA,let_pattern) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## let_pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 43, spurious reduction of production let_pattern -> var_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA LPAREN ID COMMA YEOREOBUN
##
## Ends in an error in state: 49.
##
## separated_nonempty_list(COMMA,let_pattern) -> let_pattern COMMA . separated_nonempty_list(COMMA,let_pattern) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## let_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID RPAREN
##
## Ends in an error in state: 51.
##
## toplevel -> LET1 JAGIGA let_pattern . IRANUN SARAMINDE expr eul HETE [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## LET1 JAGIGA let_pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 43, spurious reduction of production let_pattern -> var_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID IRANUN YEOREOBUN
##
## Ends in an error in state: 52.
##
## toplevel -> LET1 JAGIGA let_pattern IRANUN . SARAMINDE expr eul HETE [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## LET1 JAGIGA let_pattern IRANUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID IRANUN SARAMINDE YEOREOBUN
##
## Ends in an error in state: 53.
##
## toplevel -> LET1 JAGIGA let_pattern IRANUN SARAMINDE . expr eul HETE [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## LET1 JAGIGA let_pattern IRANUN SARAMINDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE MUKM YEOREOBUN
##
## Ends in an error in state: 56.
##
## aexpr -> MUKM . EXCLAMEXCLAM LPAREN separated_nonempty_list(COMMA,aexpr) RPAREN [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
##
## The known suffix of the stack is as follows:
## MUKM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE MUKM EXCLAMEXCLAM YEOREOBUN
##
## Ends in an error in state: 57.
##
## aexpr -> MUKM EXCLAMEXCLAM . LPAREN separated_nonempty_list(COMMA,aexpr) RPAREN [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
##
## The known suffix of the stack is as follows:
## MUKM EXCLAMEXCLAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE MUKM EXCLAMEXCLAM LPAREN YEOREOBUN
##
## Ends in an error in state: 58.
##
## aexpr -> MUKM EXCLAMEXCLAM LPAREN . separated_nonempty_list(COMMA,aexpr) RPAREN [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
##
## The known suffix of the stack is as follows:
## MUKM EXCLAMEXCLAM LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE LPAREN YEOREOBUN
##
## Ends in an error in state: 59.
##
## aexpr -> LPAREN . aexpr RPAREN [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE IF YEOREOBUN
##
## Ends in an error in state: 61.
##
## aexpr -> IF . QUESTION LPAREN aexpr RPAREN aexpr ELSE aexpr [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE IF QUESTION YEOREOBUN
##
## Ends in an error in state: 62.
##
## aexpr -> IF QUESTION . LPAREN aexpr RPAREN aexpr ELSE aexpr [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
##
## The known suffix of the stack is as follows:
## IF QUESTION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE IF QUESTION LPAREN YEOREOBUN
##
## Ends in an error in state: 63.
##
## aexpr -> IF QUESTION LPAREN . aexpr RPAREN aexpr ELSE aexpr [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
##
## The known suffix of the stack is as follows:
## IF QUESTION LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE CHUNJAT YEOREOBUN
##
## Ends in an error in state: 65.
##
## aexpr -> CHUNJAT . EXCLAMATION LBRACE expr RBRACE [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
##
## The known suffix of the stack is as follows:
## CHUNJAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE CHUNJAT EXCLAMATION YEOREOBUN
##
## Ends in an error in state: 66.
##
## aexpr -> CHUNJAT EXCLAMATION . LBRACE expr RBRACE [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
##
## The known suffix of the stack is as follows:
## CHUNJAT EXCLAMATION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE CHUNJAT EXCLAMATION LBRACE YEOREOBUN
##
## Ends in an error in state: 67.
##
## aexpr -> CHUNJAT EXCLAMATION LBRACE . expr RBRACE [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
##
## The known suffix of the stack is as follows:
## CHUNJAT EXCLAMATION LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE JA YEOREOBUN
##
## Ends in an error in state: 68.
##
## exprexpr -> JA . TILDE let_pattern REUL EXCLAMATION aexpr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## JA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE JA TILDE YEOREOBUN
##
## Ends in an error in state: 69.
##
## exprexpr -> JA TILDE . let_pattern REUL EXCLAMATION aexpr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## JA TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE JA TILDE ID RPAREN
##
## Ends in an error in state: 70.
##
## exprexpr -> JA TILDE let_pattern . REUL EXCLAMATION aexpr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## JA TILDE let_pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 43, spurious reduction of production let_pattern -> var_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE JA TILDE ID REUL YEOREOBUN
##
## Ends in an error in state: 71.
##
## exprexpr -> JA TILDE let_pattern REUL . EXCLAMATION aexpr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## JA TILDE let_pattern REUL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE JA TILDE ID REUL EXCLAMATION YEOREOBUN
##
## Ends in an error in state: 72.
##
## exprexpr -> JA TILDE let_pattern REUL EXCLAMATION . aexpr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## JA TILDE let_pattern REUL EXCLAMATION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE JA TILDE ID REUL EXCLAMATION ID YEOREOBUN
##
## Ends in an error in state: 74.
##
## aexpr -> aexpr . AH aexpr MEOGEORA QUESQUES [ SEMICOLON JOYGO AH ]
## aexpr -> aexpr . JOYGO aexpr [ SEMICOLON JOYGO AH ]
## exprexpr -> JA TILDE let_pattern REUL EXCLAMATION aexpr . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## JA TILDE let_pattern REUL EXCLAMATION aexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE ID JOYGO YEOREOBUN
##
## Ends in an error in state: 75.
##
## aexpr -> aexpr JOYGO . aexpr [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
##
## The known suffix of the stack is as follows:
## aexpr JOYGO
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE ID AH YEOREOBUN
##
## Ends in an error in state: 77.
##
## aexpr -> aexpr AH . aexpr MEOGEORA QUESQUES [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
##
## The known suffix of the stack is as follows:
## aexpr AH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE ID AH ID YEOREOBUN
##
## Ends in an error in state: 78.
##
## aexpr -> aexpr . AH aexpr MEOGEORA QUESQUES [ MEOGEORA JOYGO AH ]
## aexpr -> aexpr AH aexpr . MEOGEORA QUESQUES [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
## aexpr -> aexpr . JOYGO aexpr [ MEOGEORA JOYGO AH ]
##
## The known suffix of the stack is as follows:
## aexpr AH aexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE ID AH ID MEOGEORA YEOREOBUN
##
## Ends in an error in state: 79.
##
## aexpr -> aexpr AH aexpr MEOGEORA . QUESQUES [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
##
## The known suffix of the stack is as follows:
## aexpr AH aexpr MEOGEORA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE JA TILDE ID REUL EXCLAMATION ID SEMICOLON YEOREOBUN
##
## Ends in an error in state: 82.
##
## expr -> exprexpr SEMICOLON . expr [ REUL RBRACE EUL ]
##
## The known suffix of the stack is as follows:
## exprexpr SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE ID YEOREOBUN
##
## Ends in an error in state: 84.
##
## aexpr -> aexpr . AH aexpr MEOGEORA QUESQUES [ SEMICOLON REUL RBRACE JOYGO EUL AH ]
## aexpr -> aexpr . JOYGO aexpr [ SEMICOLON REUL RBRACE JOYGO EUL AH ]
## expr -> aexpr . [ REUL RBRACE EUL ]
## expr -> aexpr . SEMICOLON [ REUL RBRACE EUL ]
## expr -> aexpr . SEMICOLON expr [ REUL RBRACE EUL ]
##
## The known suffix of the stack is as follows:
## aexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE ID SEMICOLON YEOREOBUN
##
## Ends in an error in state: 85.
##
## expr -> aexpr SEMICOLON . [ REUL RBRACE EUL ]
## expr -> aexpr SEMICOLON . expr [ REUL RBRACE EUL ]
##
## The known suffix of the stack is as follows:
## aexpr SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE CHUNJAT EXCLAMATION LBRACE ID REUL
##
## Ends in an error in state: 87.
##
## aexpr -> CHUNJAT EXCLAMATION LBRACE expr . RBRACE [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
##
## The known suffix of the stack is as follows:
## CHUNJAT EXCLAMATION LBRACE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 84, spurious reduction of production expr -> aexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE IF QUESTION LPAREN ID YEOREOBUN
##
## Ends in an error in state: 89.
##
## aexpr -> IF QUESTION LPAREN aexpr . RPAREN aexpr ELSE aexpr [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
## aexpr -> aexpr . AH aexpr MEOGEORA QUESQUES [ RPAREN JOYGO AH ]
## aexpr -> aexpr . JOYGO aexpr [ RPAREN JOYGO AH ]
##
## The known suffix of the stack is as follows:
## IF QUESTION LPAREN aexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE IF QUESTION LPAREN ID RPAREN YEOREOBUN
##
## Ends in an error in state: 90.
##
## aexpr -> IF QUESTION LPAREN aexpr RPAREN . aexpr ELSE aexpr [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
##
## The known suffix of the stack is as follows:
## IF QUESTION LPAREN aexpr RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE IF QUESTION LPAREN ID RPAREN ID YEOREOBUN
##
## Ends in an error in state: 91.
##
## aexpr -> IF QUESTION LPAREN aexpr RPAREN aexpr . ELSE aexpr [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
## aexpr -> aexpr . AH aexpr MEOGEORA QUESQUES [ JOYGO ELSE AH ]
## aexpr -> aexpr . JOYGO aexpr [ JOYGO ELSE AH ]
##
## The known suffix of the stack is as follows:
## IF QUESTION LPAREN aexpr RPAREN aexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE IF QUESTION LPAREN ID RPAREN ID ELSE YEOREOBUN
##
## Ends in an error in state: 92.
##
## aexpr -> IF QUESTION LPAREN aexpr RPAREN aexpr ELSE . aexpr [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
##
## The known suffix of the stack is as follows:
## IF QUESTION LPAREN aexpr RPAREN aexpr ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE IF QUESTION LPAREN ID RPAREN ID ELSE ID YEOREOBUN
##
## Ends in an error in state: 93.
##
## aexpr -> IF QUESTION LPAREN aexpr RPAREN aexpr ELSE aexpr . [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
## aexpr -> aexpr . AH aexpr MEOGEORA QUESQUES [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
## aexpr -> aexpr . JOYGO aexpr [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
##
## The known suffix of the stack is as follows:
## IF QUESTION LPAREN aexpr RPAREN aexpr ELSE aexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE LPAREN ID YEOREOBUN
##
## Ends in an error in state: 94.
##
## aexpr -> LPAREN aexpr . RPAREN [ SEMICOLON RPAREN REUL RBRACE MEOGEORA JOYGO EUL ELSE COMMA AH ]
## aexpr -> aexpr . AH aexpr MEOGEORA QUESQUES [ RPAREN JOYGO AH ]
## aexpr -> aexpr . JOYGO aexpr [ RPAREN JOYGO AH ]
##
## The known suffix of the stack is as follows:
## LPAREN aexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE MUKM EXCLAMEXCLAM LPAREN ID YEOREOBUN
##
## Ends in an error in state: 98.
##
## aexpr -> aexpr . AH aexpr MEOGEORA QUESQUES [ RPAREN JOYGO COMMA AH ]
## aexpr -> aexpr . JOYGO aexpr [ RPAREN JOYGO COMMA AH ]
## separated_nonempty_list(COMMA,aexpr) -> aexpr . [ RPAREN ]
## separated_nonempty_list(COMMA,aexpr) -> aexpr . COMMA separated_nonempty_list(COMMA,aexpr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## aexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE MUKM EXCLAMEXCLAM LPAREN ID COMMA YEOREOBUN
##
## Ends in an error in state: 99.
##
## separated_nonempty_list(COMMA,aexpr) -> aexpr COMMA . separated_nonempty_list(COMMA,aexpr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## aexpr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID IRANUN SARAMINDE ID RBRACE
##
## Ends in an error in state: 101.
##
## toplevel -> LET1 JAGIGA let_pattern IRANUN SARAMINDE expr . eul HETE [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## LET1 JAGIGA let_pattern IRANUN SARAMINDE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 84, spurious reduction of production expr -> aexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID IRANUN SARAMINDE ID REUL YEOREOBUN
##
## Ends in an error in state: 102.
##
## eul -> REUL . option(EXCLAMATION) [ HETE ]
##
## The known suffix of the stack is as follows:
## REUL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET1 JAGIGA ID IRANUN SARAMINDE ID EUL YEOREOBUN
##
## Ends in an error in state: 106.
##
## toplevel -> LET1 JAGIGA let_pattern IRANUN SARAMINDE expr eul . HETE [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## LET1 JAGIGA let_pattern IRANUN SARAMINDE expr eul
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IN YEOREOBUN
##
## Ends in an error in state: 108.
##
## toplevel -> IN . ID JUNGENEUN EXCLAMEXCLAM AMURI arg_pattern IRADO type_expr LBRACE expr RBRACE HAL SUGA UPDANDA EXCLAMEXCLAM [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IN ID YEOREOBUN
##
## Ends in an error in state: 109.
##
## toplevel -> IN ID . JUNGENEUN EXCLAMEXCLAM AMURI arg_pattern IRADO type_expr LBRACE expr RBRACE HAL SUGA UPDANDA EXCLAMEXCLAM [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## IN ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IN ID JUNGENEUN YEOREOBUN
##
## Ends in an error in state: 110.
##
## toplevel -> IN ID JUNGENEUN . EXCLAMEXCLAM AMURI arg_pattern IRADO type_expr LBRACE expr RBRACE HAL SUGA UPDANDA EXCLAMEXCLAM [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## IN ID JUNGENEUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IN ID JUNGENEUN EXCLAMEXCLAM YEOREOBUN
##
## Ends in an error in state: 111.
##
## toplevel -> IN ID JUNGENEUN EXCLAMEXCLAM . AMURI arg_pattern IRADO type_expr LBRACE expr RBRACE HAL SUGA UPDANDA EXCLAMEXCLAM [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## IN ID JUNGENEUN EXCLAMEXCLAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IN ID JUNGENEUN EXCLAMEXCLAM AMURI YEOREOBUN
##
## Ends in an error in state: 112.
##
## toplevel -> IN ID JUNGENEUN EXCLAMEXCLAM AMURI . arg_pattern IRADO type_expr LBRACE expr RBRACE HAL SUGA UPDANDA EXCLAMEXCLAM [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## IN ID JUNGENEUN EXCLAMEXCLAM AMURI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IN ID JUNGENEUN EXCLAMEXCLAM AMURI ID YEOREOBUN
##
## Ends in an error in state: 113.
##
## arg_pattern -> ID . COLON type_expr [ IRADO ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IN ID JUNGENEUN EXCLAMEXCLAM AMURI ID COLON YEOREOBUN
##
## Ends in an error in state: 114.
##
## arg_pattern -> ID COLON . type_expr [ IRADO ]
##
## The known suffix of the stack is as follows:
## ID COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IN ID JUNGENEUN EXCLAMEXCLAM AMURI ID COLON ID SEMICOLON
##
## Ends in an error in state: 115.
##
## arg_pattern -> ID COLON type_expr . [ IRADO ]
## type_expr -> type_expr . ARROW type_expr [ JOYGO IRADO ARROW ]
## type_expr_tuple -> type_expr . JOYGO type_expr [ JOYGO IRADO ARROW ]
##
## The known suffix of the stack is as follows:
## ID COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IN ID JUNGENEUN EXCLAMEXCLAM AMURI ID COLON ID IRADO YEOREOBUN
##
## Ends in an error in state: 117.
##
## toplevel -> IN ID JUNGENEUN EXCLAMEXCLAM AMURI arg_pattern IRADO . type_expr LBRACE expr RBRACE HAL SUGA UPDANDA EXCLAMEXCLAM [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## IN ID JUNGENEUN EXCLAMEXCLAM AMURI arg_pattern IRADO
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IN ID JUNGENEUN EXCLAMEXCLAM AMURI ID COLON ID IRADO ID SEMICOLON
##
## Ends in an error in state: 118.
##
## toplevel -> IN ID JUNGENEUN EXCLAMEXCLAM AMURI arg_pattern IRADO type_expr . LBRACE expr RBRACE HAL SUGA UPDANDA EXCLAMEXCLAM [ YEOREOBUN LET1 IN CHUNJAT ]
## type_expr -> type_expr . ARROW type_expr [ LBRACE JOYGO ARROW ]
## type_expr_tuple -> type_expr . JOYGO type_expr [ LBRACE JOYGO ARROW ]
##
## The known suffix of the stack is as follows:
## IN ID JUNGENEUN EXCLAMEXCLAM AMURI arg_pattern IRADO type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IN ID JUNGENEUN EXCLAMEXCLAM AMURI ID COLON ID IRADO ID LBRACE YEOREOBUN
##
## Ends in an error in state: 119.
##
## toplevel -> IN ID JUNGENEUN EXCLAMEXCLAM AMURI arg_pattern IRADO type_expr LBRACE . expr RBRACE HAL SUGA UPDANDA EXCLAMEXCLAM [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## IN ID JUNGENEUN EXCLAMEXCLAM AMURI arg_pattern IRADO type_expr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IN ID JUNGENEUN EXCLAMEXCLAM AMURI ID COLON ID IRADO ID LBRACE ID REUL
##
## Ends in an error in state: 120.
##
## toplevel -> IN ID JUNGENEUN EXCLAMEXCLAM AMURI arg_pattern IRADO type_expr LBRACE expr . RBRACE HAL SUGA UPDANDA EXCLAMEXCLAM [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## IN ID JUNGENEUN EXCLAMEXCLAM AMURI arg_pattern IRADO type_expr LBRACE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 84, spurious reduction of production expr -> aexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IN ID JUNGENEUN EXCLAMEXCLAM AMURI ID COLON ID IRADO ID LBRACE ID RBRACE YEOREOBUN
##
## Ends in an error in state: 121.
##
## toplevel -> IN ID JUNGENEUN EXCLAMEXCLAM AMURI arg_pattern IRADO type_expr LBRACE expr RBRACE . HAL SUGA UPDANDA EXCLAMEXCLAM [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## IN ID JUNGENEUN EXCLAMEXCLAM AMURI arg_pattern IRADO type_expr LBRACE expr RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IN ID JUNGENEUN EXCLAMEXCLAM AMURI ID COLON ID IRADO ID LBRACE ID RBRACE HAL YEOREOBUN
##
## Ends in an error in state: 122.
##
## toplevel -> IN ID JUNGENEUN EXCLAMEXCLAM AMURI arg_pattern IRADO type_expr LBRACE expr RBRACE HAL . SUGA UPDANDA EXCLAMEXCLAM [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## IN ID JUNGENEUN EXCLAMEXCLAM AMURI arg_pattern IRADO type_expr LBRACE expr RBRACE HAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IN ID JUNGENEUN EXCLAMEXCLAM AMURI ID COLON ID IRADO ID LBRACE ID RBRACE HAL SUGA YEOREOBUN
##
## Ends in an error in state: 123.
##
## toplevel -> IN ID JUNGENEUN EXCLAMEXCLAM AMURI arg_pattern IRADO type_expr LBRACE expr RBRACE HAL SUGA . UPDANDA EXCLAMEXCLAM [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## IN ID JUNGENEUN EXCLAMEXCLAM AMURI arg_pattern IRADO type_expr LBRACE expr RBRACE HAL SUGA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IN ID JUNGENEUN EXCLAMEXCLAM AMURI ID COLON ID IRADO ID LBRACE ID RBRACE HAL SUGA UPDANDA YEOREOBUN
##
## Ends in an error in state: 124.
##
## toplevel -> IN ID JUNGENEUN EXCLAMEXCLAM AMURI arg_pattern IRADO type_expr LBRACE expr RBRACE HAL SUGA UPDANDA . EXCLAMEXCLAM [ YEOREOBUN LET1 IN CHUNJAT ]
##
## The known suffix of the stack is as follows:
## IN ID JUNGENEUN EXCLAMEXCLAM AMURI arg_pattern IRADO type_expr LBRACE expr RBRACE HAL SUGA UPDANDA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: YEOREOBUN ID NEUN QUESQUES VECTOR
##
## Ends in an error in state: 126.
##
## list(toplevel) -> toplevel . list(toplevel) [ CHUNJAT ]
##
## The known suffix of the stack is as follows:
## toplevel
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT YEOREOBUN
##
## Ends in an error in state: 130.
##
## prog -> list(toplevel) CHUNJAT . EXCLAMATION LBRACE expr RBRACE EOF [ # ]
##
## The known suffix of the stack is as follows:
## list(toplevel) CHUNJAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION YEOREOBUN
##
## Ends in an error in state: 131.
##
## prog -> list(toplevel) CHUNJAT EXCLAMATION . LBRACE expr RBRACE EOF [ # ]
##
## The known suffix of the stack is as follows:
## list(toplevel) CHUNJAT EXCLAMATION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE YEOREOBUN
##
## Ends in an error in state: 132.
##
## prog -> list(toplevel) CHUNJAT EXCLAMATION LBRACE . expr RBRACE EOF [ # ]
##
## The known suffix of the stack is as follows:
## list(toplevel) CHUNJAT EXCLAMATION LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE ID REUL
##
## Ends in an error in state: 133.
##
## prog -> list(toplevel) CHUNJAT EXCLAMATION LBRACE expr . RBRACE EOF [ # ]
##
## The known suffix of the stack is as follows:
## list(toplevel) CHUNJAT EXCLAMATION LBRACE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 84, spurious reduction of production expr -> aexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CHUNJAT EXCLAMATION LBRACE ID RBRACE YEOREOBUN
##
## Ends in an error in state: 134.
##
## prog -> list(toplevel) CHUNJAT EXCLAMATION LBRACE expr RBRACE . EOF [ # ]
##
## The known suffix of the stack is as follows:
## list(toplevel) CHUNJAT EXCLAMATION LBRACE expr RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

